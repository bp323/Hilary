/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var Cassandra = require('oae-util/lib/cassandra');

var AccessToken = require('../model').AccessToken;

/**
 * Creates an access token
 *
 * @param  {String}         token                   The randomly generated string, this will be the primary identifier for the access token
 * @param  {String}         userId                  The ID of the user for who this access token will work
 * @param  {String}         clientId                The ID of the client to which this access token is associated
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.err            Standard error object, if any
 * @param  {AccessToken}    callback.accessToken    The created access token
 */
var createAccessToken = module.exports.createAccessToken = function(token, userId, clientId, callback) {
    var params = {
        'userId': userId,
        'clientId': clientId
    };

    var byUserParams = {};
    byUserParams[clientId] = token;
    var queries = [
        Cassandra.constructUpsertCQL('OAuthAccessToken', 'token', token, params),
        Cassandra.constructUpsertCQL('OAuthAccessTokenByUser', 'userId', userId, byUserParams),
    ];
    Cassandra.runBatchQuery(queries, 'QUORUM', function(err) {
        if (err) {
            return callback(err);
        }

        return callback(null, new AccessToken(token, userId, clientId));
    });
};

/**
 * Get a full access token object
 *
 * @param  {String}         token                   The randomly generated string
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.err            Standard error object, if any
 * @param  {AccessToken}    callback.accessToken    The access token object which contains the user for which the token can be used
 */
var getAccessToken = module.exports.getAccessToken = function(token, callback) {
    // TODO: As this gets called on every OAuth authenticated call, it might not be a bad idea to cache this in Redis
    Cassandra.runQuery('SELECT * FROM OAuthAccessToken USING CONSISTENCY QUORUM WHERE token = ?', [token], function(err, rows) {
        if (err) {
            return callback(err);
        } else if (!rows || rows[0].count <= 1) {
            return callback(null, null);
        }

        var hash = Cassandra.rowToHash(rows[0]);
        var accessToken = new AccessToken(hash.token, hash.userId, hash.clientId);
        return callback(null, accessToken);
    });
};

/**
 * Given a user and a client, gets the access token for that combination
 *
 * @param  {String}         userId                  The user who allowed access to his data to the client
 * @param  {String}         clientId                The client for which the access token was granted
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.err            Standard error object, if any
 * @param  {AccessToken}    callback.accessToken    The access token object which contains the user for which the token can be used
 */
var getAccessTokenForUserAndClient = module.exports.getAccessTokenForUserAndClient = function(userId, clientId, callback) {
    // TODO: As this gets called on every OAuth authenticated call, it might not be a bad idea to cache this in Redis
    Cassandra.runQuery('SELECT ? FROM OAuthAccessTokenByUser USING CONSISTENCY QUORUM WHERE userId = ?', [clientId, userId], function(err, rows) {
        if (err) {
            return callback(err);
        } else if (!rows || rows[0].count < 1) {
            return callback(null, null);
        }

        var hash = Cassandra.rowToHash(rows[0]);
        var accessToken = new AccessToken(hash[clientId], userId, clientId);
        return callback(null, accessToken);
    });
};
