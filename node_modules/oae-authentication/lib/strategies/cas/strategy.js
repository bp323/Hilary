/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var CAS = require('cas-sfu');
var passport = require('passport');
var util = require('util');
var url = require('url');

var AuthenticationUtil = require('oae-authentication/lib/util');

var Strategy = function(options, verify) {
    this.name = 'cas';
    this.options = options;
    this.verify = verify;
    passport.Strategy.call(this);
};

/**
 * Inherit from `passport.Strategy`.
 */
util.inherits(Strategy, passport.Strategy);


/**
 * Authenticate request based on the contents of request parameters
 *
 * @param  {Request}   req
 * @api protected
 */
Strategy.prototype.authenticate = function(req) {
    var self = this;
    var cas = new CAS(self.options);

    var ticket = req.param('ticket');
    if (!ticket) {
        // If there is no CAS ticket, invoke the redirect to the CAS login
        // page as configured by the tenant administrator
        var redirectUrl = url.parse(self.options.casBase + self.options.loginPath, true);
        redirectUrl.query.service = self.options.service;
        if (self.options.allow) {
            redirectUrl.query.allow = self.options.allow;
        }

        return self.redirect(url.format(redirectUrl));
    }

    // If we have a ticket in the parameters, we try to validate it
    cas.validate(ticket, function(err, loggedIn, casResponse) {
        if (err) {
            return self.error(err);
        } else if (!loggedIn) {
            // The CAS server thinks this is an invalid token. This means the user
            // is probably tampering with the request token
            return self.fail('Invalid token', 401);
        }

        // This `self.verify` invocation calls into the `init.js` file of the CAS
        // strategy plugin to fetch or create the user
        self.verify(casResponse, function(err, user) {
            if (err) {
                return self.error(new Error(err.msg));
            }

            // By this point, the user has been retrieved (or created). We pass it
            // on to passport so eventually `req.logIn` will be invoked in the
            // `AuthenticationUtil.handleExternalCallback` method. We pass the user
            // back as the user rather than the authObj (i.e., `{'user': user}`)
            // because `AuthenticationUtil.handleExternalCallback` will take care
            // of wrapping the session user. This is no different than how providers
            // such as Google or Twitter would work.
            return self.success(user);
        });
    });
};

/**
 * Expose `Strategy`.
 */
module.exports = Strategy;
