/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityDAO = require('oae-activity/lib/internal/dao');

var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');

describe('Activity Migration', function() {

    // Rest context that can be used every time we need to make a request as a tenant admin
    var camAdminRestContext = null;


    /**
     * Function that will fill up the rest context(s)
     */
    before(function(callback) {
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        return callback();
    });

    /**
     * Mocks an activity
     *
     * @param  {Number}     published       The timestamp when this item was published
     * @param  {Number}     id              The ID to use for the activity
     * @param  {String}     userId          The ID of the user that will be the actor of this activity
     * @return {Activity}                   A mocked activity
     */
    var _mockActivity = function(published, id, userId) {
        var activityId = published + ':' + id;
        var activity = {};
        activity[ActivityConstants.properties.OAE_ACTIVITY_TYPE] = 'content-create';
        activity[ActivityConstants.properties.OAE_ACTIVITY_ID] = activityId;
        activity.verb = 'created';
        activity.published = published;

        activity.actor = {
            'objectType': 'user',
            'oae:id': userId
        };
        return activity;
    };

    /**
     * Creates 10 activities, 5 under the old `userId` activity stream ID and 5 under the new `userId#activity` activity stream
     *
     * @param  {String}     userId          The ID of the user for which to store the activitites
     * @param  {Function}   callback        Standard callback function
     * @param  {Object}     callback.err    Standard error object
     */
    var setUp = function(userId, callback) {
        var activities = {};

        // Re-use the same timestamp in the id to avoid race conditions
        var published = Date.now();

        // Generate 5 activities under the `u:cam:foo` activity stream
        activities[userId] = {};
        for (var i = 0; i < 5; i++) {
            var activity = _mockActivity(published, i, userId);
            activities[userId][activity[ActivityConstants.properties.OAE_ACTIVITY_ID]] = activity;
        }

        // Generate 5 activitities under the `u:cam:foo#activity` activity stream
        activities[userId + '#activity'] = {};
        for (i = 5; i < 10; i++) {
            var newActivity = _mockActivity(published, i, userId);
            activities[userId + '#activity'][newActivity[ActivityConstants.properties.OAE_ACTIVITY_ID]] = newActivity;
        }

        ActivityDAO.deliverActivities(activities, callback);
    };

    /**
     * Test that verifies that activities are automatically fetched from both activity streams
     */
    it('verify mixed activity streams can be retrieved', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
            assert.ok(!err);

            var mrvisser = _.values(users)[0];
            setUp(mrvisser.user.id, function(activities) {
                assert.ok(!err);

                // Get the 4 first results, these should come from the `userId#activity` stream
                RestAPI.Activity.getCurrentUserActivityStream(mrvisser.restContext, {'limit': 4}, function(err, activityStream) {
                    assert.ok(!err);

                    assert.equal(activityStream.items.length, 4);
                    assert.equal(activityStream.items[0][ActivityConstants.properties.OAE_ACTIVITY_ID], activityStream.items[0]['published'] + ':9');
                    assert.equal(activityStream.items[1][ActivityConstants.properties.OAE_ACTIVITY_ID], activityStream.items[1]['published'] + ':8');
                    assert.equal(activityStream.items[2][ActivityConstants.properties.OAE_ACTIVITY_ID], activityStream.items[2]['published'] + ':7');
                    assert.equal(activityStream.items[3][ActivityConstants.properties.OAE_ACTIVITY_ID], activityStream.items[3]['published'] + ':6');


                    // Get the next 4, the first one should be one from the new stream, the remaining three should be from the old stream
                    RestAPI.Activity.getCurrentUserActivityStream(mrvisser.restContext, {'limit': 4, 'start': activityStream.nextToken}, function(err, activityStream) {
                        assert.ok(!err);

                        assert.equal(activityStream.items.length, 4);
                        assert.equal(activityStream.items[0][ActivityConstants.properties.OAE_ACTIVITY_ID], activityStream.items[0]['published'] + ':5');
                        assert.equal(activityStream.items[1][ActivityConstants.properties.OAE_ACTIVITY_ID], activityStream.items[1]['published'] + ':4');
                        assert.equal(activityStream.items[2][ActivityConstants.properties.OAE_ACTIVITY_ID], activityStream.items[2]['published'] + ':3');
                        assert.equal(activityStream.items[3][ActivityConstants.properties.OAE_ACTIVITY_ID], activityStream.items[3]['published'] + ':2');

                        // Get the last 2, they should come from the old activity stream
                        RestAPI.Activity.getCurrentUserActivityStream(mrvisser.restContext, {'limit': 4, 'start': activityStream.nextToken}, function(err, activityStream) {
                            assert.ok(!err);

                            assert.equal(activityStream.items.length, 2);
                            assert.equal(activityStream.items[0][ActivityConstants.properties.OAE_ACTIVITY_ID], activityStream.items[0]['published'] + ':1');
                            assert.equal(activityStream.items[1][ActivityConstants.properties.OAE_ACTIVITY_ID], activityStream.items[1]['published'] + ':0');


                            // Try getting a page that starts with a token that was the last one in the new activity stream
                            RestAPI.Activity.getCurrentUserActivityStream(mrvisser.restContext, {'limit': 4, 'start': activityStream.items[0]['published'] + ':5'}, function(err, activityStream) {
                                assert.ok(!err);

                                assert.equal(activityStream.items.length, 4);
                                assert.equal(activityStream.items[0][ActivityConstants.properties.OAE_ACTIVITY_ID], activityStream.items[0]['published'] + ':4');
                                assert.equal(activityStream.items[1][ActivityConstants.properties.OAE_ACTIVITY_ID], activityStream.items[1]['published'] + ':3');
                                assert.equal(activityStream.items[2][ActivityConstants.properties.OAE_ACTIVITY_ID], activityStream.items[2]['published'] + ':2');
                                assert.equal(activityStream.items[3][ActivityConstants.properties.OAE_ACTIVITY_ID], activityStream.items[3]['published'] + ':1');

                                // There are no more items after this
                                RestAPI.Activity.getCurrentUserActivityStream(mrvisser.restContext, {'limit': 4, 'start': activityStream.items[0]['published'] + ':0'}, function(err, activityStream) {
                                    assert.ok(!err);

                                    assert.equal(activityStream.items.length, 0);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
