/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var OaeUtil = require('oae-util/lib/util');

var ShortId = require('shortid');
var Validator = require('oae-util/lib/validator').Validator;

// Variable to keep track of todos for users
// Normally this would be stored in Cassandra
var userTodos = {};

/**
 * Retrieve the list of todos for a user
 *
 * @param  {Context}   ctx               The current context
 * @param  {Function}  callback          Standard callback function
 * @param  {Todo[]}    callback.todos    An Array of Todo objects of the user
 */
var getTodos = module.exports.getTodos = function(ctx, callback) {
    if (!ctx.user()) {
        return callback({'code': 401, 'msg': 'You are not authorized to get todos.'});
    }

    // Return the todo list
    todos = userTodos[ctx.user().id] || [];

    callback(null, todos);
};

/**
 * Add a todo to the list of todos for a user
 *
 * @param  {Context}   ctx              The current context
 * @param  {String}    todo             The description of the todo to add
 * @param  {Function}  callback         Standard callback function
 * @param  {Todo}      callback.todo    A Todo object representing the created todo
 */
var addTodo = module.exports.addTodo = function(ctx, todo, callback) {
    if (!ctx.user()) {
        return callback({'code': 401, 'msg': 'You are not authorized to add todos.'});
    }

    // Validate the incoming todo
    var validator = new Validator();
    validator.check(todo.description, {'code': 400, 'msg': 'A todo description must be provided'}).notEmpty();

    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Create a new todo
    var newTodo = {
        'done': false,
        'description': todo.description,
        'id': ShortId.generate()
    };

    // Push the new todo into the list
    userTodos[ctx.user().id] = userTodos[ctx.user().id] || [];
    userTodos[ctx.user().id].push(newTodo);

    // Return the todo list
    callback(null, newTodo);
};

/**
 * Mark a todo as 'done' or `todo`
 *
 * @param  {Context}   ctx              The current context
 * @param  {String}    todoID           The ID of the todo to mark as 'done'
 * @param  {Boolean}   done             `true` if the todo was marked as done, `false` if it was marked as todo
 * @param  {Function}  callback         Standard callback function
 * @param  {Todo}      callback.todo    A Todo object representing the created todo
 */
var markTodoAsDone = module.exports.markTodoAsDone = function(ctx, todoID, done, callback) {
    if (!ctx.user()) {
        return callback({'code': 401, 'msg': 'You are not authorized to edit todos.'});
    }

    // Validate the incoming todo
    var validator = new Validator();
    validator.check(todoID, {'code': 400, 'msg': 'A todo ID must be provided'}).notEmpty();
    validator.check(done, {'code': 400, 'msg': 'A todo status must be provided'}).notEmpty();

    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    done = OaeUtil.castToBoolean(done);

    // Loop over all todos for the user
    for (var i = 0; i < userTodos[ctx.user().id].length; i++) {
        if (userTodos[ctx.user().id][i].id === todoID) {
            // Mark the todo as done
            userTodos[ctx.user().id][i].done = done;
            return callback(null, userTodos[ctx.user().id][i]);
        }
    }
};
